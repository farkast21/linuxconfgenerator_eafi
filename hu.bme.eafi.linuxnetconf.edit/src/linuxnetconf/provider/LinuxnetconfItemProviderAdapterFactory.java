/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package linuxnetconf.provider;

import java.util.ArrayList;
import java.util.Collection;

import linuxnetconf.util.LinuxnetconfAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LinuxnetconfItemProviderAdapterFactory extends LinuxnetconfAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LinuxnetconfItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.CMDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMDBItemProvider cmdbItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.CMDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCMDBAdapter() {
		if (cmdbItemProvider == null) {
			cmdbItemProvider = new CMDBItemProvider(this);
		}

		return cmdbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.ServerGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServerGroupItemProvider serverGroupItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.ServerGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServerGroupAdapter() {
		if (serverGroupItemProvider == null) {
			serverGroupItemProvider = new ServerGroupItemProvider(this);
		}

		return serverGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.ServerComputer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServerComputerItemProvider serverComputerItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.ServerComputer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServerComputerAdapter() {
		if (serverComputerItemProvider == null) {
			serverComputerItemProvider = new ServerComputerItemProvider(this);
		}

		return serverComputerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.StaticIPConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticIPConfigItemProvider staticIPConfigItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.StaticIPConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticIPConfigAdapter() {
		if (staticIPConfigItemProvider == null) {
			staticIPConfigItemProvider = new StaticIPConfigItemProvider(this);
		}

		return staticIPConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.EthernetInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EthernetInterfaceItemProvider ethernetInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.EthernetInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEthernetInterfaceAdapter() {
		if (ethernetInterfaceItemProvider == null) {
			ethernetInterfaceItemProvider = new EthernetInterfaceItemProvider(this);
		}

		return ethernetInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.BondingInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BondingInterfaceItemProvider bondingInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.BondingInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBondingInterfaceAdapter() {
		if (bondingInterfaceItemProvider == null) {
			bondingInterfaceItemProvider = new BondingInterfaceItemProvider(this);
		}

		return bondingInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.VlanInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VlanInterfaceItemProvider vlanInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.VlanInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVlanInterfaceAdapter() {
		if (vlanInterfaceItemProvider == null) {
			vlanInterfaceItemProvider = new VlanInterfaceItemProvider(this);
		}

		return vlanInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.Bridge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BridgeItemProvider bridgeItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.Bridge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBridgeAdapter() {
		if (bridgeItemProvider == null) {
			bridgeItemProvider = new BridgeItemProvider(this);
		}

		return bridgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link linuxnetconf.SubInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubInterfaceItemProvider subInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link linuxnetconf.SubInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubInterfaceAdapter() {
		if (subInterfaceItemProvider == null) {
			subInterfaceItemProvider = new SubInterfaceItemProvider(this);
		}

		return subInterfaceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cmdbItemProvider != null) cmdbItemProvider.dispose();
		if (serverGroupItemProvider != null) serverGroupItemProvider.dispose();
		if (serverComputerItemProvider != null) serverComputerItemProvider.dispose();
		if (staticIPConfigItemProvider != null) staticIPConfigItemProvider.dispose();
		if (ethernetInterfaceItemProvider != null) ethernetInterfaceItemProvider.dispose();
		if (bondingInterfaceItemProvider != null) bondingInterfaceItemProvider.dispose();
		if (vlanInterfaceItemProvider != null) vlanInterfaceItemProvider.dispose();
		if (bridgeItemProvider != null) bridgeItemProvider.dispose();
		if (subInterfaceItemProvider != null) subInterfaceItemProvider.dispose();
	}

}
